...

def process_dump(pid, proc, indent=0, verbosity=3):
    proc_dmp = {}
    proc_dmp['pid'] = pid
    proc_dmp['livello'] ="utente" if proc['livello'] == gdb.Value(3) else "sistema"
...

...
    pila_dmp = {}
    pila_dmp['start'] = "{:016x} \u279e {:x}):\n".format(vstack, stack)
    pila_dmp['cs'] =  dump_selector(readfis(stack + 8))
    pila_dmp['rflags'] = dump_flags(readfis(stack + 16))  
    pila_dmp['rsp'] = "{:#18x}".format(readfis(stack + 24)) 
    pila_dmp['ss'] = dump_selector(readfis(stack + 32)) 
    proc_dmp['pila_dmp'] = pila_dmp  
...

...
    cr3 = toi(proc['cr3'])
    proc_dmp['cr3'] = vm_paddr_to_str(cr3)

    # proc_dmp['nex_ist'] = show_lines(gdb.find_pc_line(rip), indent)
    if len(toshow) > 0:
        campi_aggiuntivi = {}
        for f in toshow:
            campi_aggiuntivi[f.name] = str(proc[f]),
        proc_dmp['campi_aggiuntivi'] = campi_aggiuntivi  
    
    return proc_dmp
...

...
class ProcessList(gdb.Command):
...

...
    def invoke(self, arg, from_tty):
        out = {}
        out['command'] = "process_list"
        out['process'] = []
        for pid, proc in process_list(arg):
            out['process'].append(process_dump(pid, proc, indent=4, verbosity=0))
        with open('myfile.txt', 'w') as f:
            f.write(json.dumps(out))
        gdb.write(json.dumps(out) + "\n")
... 



